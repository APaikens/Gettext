<?php
namespace Gettext\Utils;

class Locales
{
    /**
     * Plural rule definitions
     * @var array
     * @link http://localization-guide.readthedocs.org/en/latest/l10n/pluralforms.html
     */
    protected static $pluralRules = array(
        'ach' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'af' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ak' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'am' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'an' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'anp' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ar' => array('plurals' => 6, 'pluralRule' => '(n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5)'),
        'arn' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'as' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ast' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ay' => array('plurals' => 1, 'pluralRule' => '0'),
        'az' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'be' => array('plurals' => 3, 'pluralRule' => '(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)'),
        'bg' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'bn' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'bo' => array('plurals' => 1, 'pluralRule' => '0'),
        'br' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'brx' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'bs' => array('plurals' => 3, 'pluralRule' => '(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)'),
        'ca' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'cgg' => array('plurals' => 1, 'pluralRule' => '0'),
        'cs' => array('plurals' => 3, 'pluralRule' => '(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2'),
        'csb' => array('plurals' => 3, 'pluralRule' => '(n==1) ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2'),
        'cy' => array('plurals' => 4, 'pluralRule' => '(n==1) ? 0 : (n==2) ? 1 : (n != 8 && n != 11) ? 2 : 3'),
        'da' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'de' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'doi' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'dz' => array('plurals' => 1, 'pluralRule' => '0'),
        'el' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'en' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'eo' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'es' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'es_AR' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'et' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'eu' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'fa' => array('plurals' => 1, 'pluralRule' => '0'),
        'ff' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'fi' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'fil' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'fo' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'fr' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'fur' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'fy' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ga' => array('plurals' => 5, 'pluralRule' => '(n==1) ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4'),
        'gd' => array('plurals' => 4, 'pluralRule' => '(n==1 || n==11) ? 0 : (n==2 || n==12) ? 1 : (n > 2 && n < 20) ? 2 : 3'),
        'gl' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'gu' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'gun' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'ha' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'he' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'hi' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'hne' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'hr' => array('plurals' => 3, 'pluralRule' => '(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)'),
        'hu' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'hy' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ia' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'id' => array('plurals' => 1, 'pluralRule' => '0'),
        'is' => array('plurals' => 2, 'pluralRule' => '(n%10!=1 || n%100==11)'),
        'it' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ja' => array('plurals' => 1, 'pluralRule' => '0'),
        'jbo' => array('plurals' => 1, 'pluralRule' => '0'),
        'jv' => array('plurals' => 2, 'pluralRule' => '(n != 0)'),
        'ka' => array('plurals' => 1, 'pluralRule' => '0'),
        'kk' => array('plurals' => 1, 'pluralRule' => '0'),
        'kl' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'km' => array('plurals' => 1, 'pluralRule' => '0'),
        'kn' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ko' => array('plurals' => 1, 'pluralRule' => '0'),
        'ku' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'kw' => array('plurals' => 4, 'pluralRule' => '(n==1) ? 0 : (n==2) ? 1 : (n == 3) ? 2 : 3'),
        'ky' => array('plurals' => 1, 'pluralRule' => '0'),
        'lb' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ln' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'lo' => array('plurals' => 1, 'pluralRule' => '0'),
        'lt' => array('plurals' => 3, 'pluralRule' => '(n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2)'),
        'lv' => array('plurals' => 3, 'pluralRule' => '(n%10==1 && n%100!=11 ? 0 : n != 0 ? 1 : 2)'),
        'mai' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'mfe' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'mg' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'mi' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'mk' => array('plurals' => 2, 'pluralRule' => 'n==1 || n%10==1 ? 0 : 1'),
        'ml' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'mn' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'mni' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'mnk' => array('plurals' => 3, 'pluralRule' => '(n==0 ? 0 : n==1 ? 1 : 2)'),
        'mr' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ms' => array('plurals' => 1, 'pluralRule' => '0'),
        'mt' => array('plurals' => 4, 'pluralRule' => '(n==1 ? 0 : n==0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3)'),
        'my' => array('plurals' => 1, 'pluralRule' => '0'),
        'nah' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'nap' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'nb' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ne' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'nl' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'nn' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'no' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'nso' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'oc' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'or' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'pa' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'pap' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'pl' => array('plurals' => 3, 'pluralRule' => '(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)'),
        'pms' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ps' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'pt' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'pt_BR' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'rm' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ro' => array('plurals' => 3, 'pluralRule' => '(n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2)'),
        'ru' => array('plurals' => 3, 'pluralRule' => '(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)'),
        'rw' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'sah' => array('plurals' => 1, 'pluralRule' => '0'),
        'sat' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'sco' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'sd' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'se' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'si' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'sk' => array('plurals' => 3, 'pluralRule' => '(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2'),
        'sl' => array('plurals' => 4, 'pluralRule' => '(n%100==1 ? 1 : n%100==2 ? 2 : n%100==3 || n%100==4 ? 3 : 0)'),
        'so' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'son' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'sq' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'sr' => array('plurals' => 3, 'pluralRule' => '(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)'),
        'su' => array('plurals' => 1, 'pluralRule' => '0'),
        'sv' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'sw' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'ta' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'te' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'tg' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'th' => array('plurals' => 1, 'pluralRule' => '0'),
        'ti' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'tk' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'tr' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'tt' => array('plurals' => 1, 'pluralRule' => '0'),
        'ug' => array('plurals' => 1, 'pluralRule' => '0'),
        'uk' => array('plurals' => 3, 'pluralRule' => '(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)'),
        'ur' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'uz' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'vi' => array('plurals' => 1, 'pluralRule' => '0'),
        'wa' => array('plurals' => 2, 'pluralRule' => '(n > 1)'),
        'wo' => array('plurals' => 1, 'pluralRule' => '0'),
        'yo' => array('plurals' => 2, 'pluralRule' => '(n != 1)'),
        'zh' => array('plurals' => 1, 'pluralRule' => '0'),
        // 'zh' => array('plurals' => 2, 'pluralRule' => '(n > 1)'), // In rare cases where plural form introduces difference in personal pronoun (such as her vs. they, we vs. I), the plural form is different.
    );

    /**
     * Language names
     * @var array
     * @link http://cldr.unicode.org/index/downloads/cldr-26
     */
    protected static $languageNames = array(
        'aa' => 'Afar',
        'ab' => 'Abkhazian',
        'ace' => 'Achinese',
        'ach' => 'Acoli',
        'ada' => 'Adangme',
        'ady' => 'Adyghe',
        'ae' => 'Avestan',
        'aeb' => 'Tunisian Arabic',
        'af' => 'Afrikaans',
        'afh' => 'Afrihili',
        'agq' => 'Aghem',
        'ain' => 'Ainu',
        'ak' => 'Akan',
        'akk' => 'Akkadian',
        'akz' => 'Alabama',
        'ale' => 'Aleut',
        'aln' => 'Gheg Albanian',
        'alt' => 'Southern Altai',
        'am' => 'Amharic',
        'an' => 'Aragonese',
        'ang' => 'Old English',
        'anp' => 'Angika',
        'ar' => 'Arabic',
        'ar_001' => 'Modern Standard Arabic',
        'arc' => 'Aramaic',
        'arn' => 'Mapuche',
        'aro' => 'Araona',
        'arp' => 'Arapaho',
        'arq' => 'Algerian Arabic',
        'arw' => 'Arawak',
        'ary' => 'Moroccan Arabic',
        'arz' => 'Egyptian Arabic',
        'as' => 'Assamese',
        'asa' => 'Asu',
        'ase' => 'American Sign Language',
        'ast' => 'Asturian',
        'av' => 'Avaric',
        'avk' => 'Kotava',
        'awa' => 'Awadhi',
        'ay' => 'Aymara',
        'az' => 'Azerbaijani',
        'azb' => 'South Azerbaijani',
        'ba' => 'Bashkir',
        'bal' => 'Baluchi',
        'ban' => 'Balinese',
        'bar' => 'Bavarian',
        'bas' => 'Basaa',
        'bax' => 'Bamun',
        'bbc' => 'Batak Toba',
        'bbj' => 'Ghomala',
        'be' => 'Belarusian',
        'bej' => 'Beja',
        'bem' => 'Bemba',
        'bew' => 'Betawi',
        'bez' => 'Bena',
        'bfd' => 'Bafut',
        'bfq' => 'Badaga',
        'bg' => 'Bulgarian',
        'bho' => 'Bhojpuri',
        'bi' => 'Bislama',
        'bik' => 'Bikol',
        'bin' => 'Bini',
        'bjn' => 'Banjar',
        'bkm' => 'Kom',
        'bla' => 'Siksika',
        'bm' => 'Bambara',
        'bn' => 'Bengali',
        'bo' => 'Tibetan',
        'bpy' => 'Bishnupriya',
        'bqi' => 'Bakhtiari',
        'br' => 'Breton',
        'bra' => 'Braj',
        'brh' => 'Brahui',
        'brx' => 'Bodo',
        'bs' => 'Bosnian',
        'bss' => 'Akoose',
        'bua' => 'Buriat',
        'bug' => 'Buginese',
        'bum' => 'Bulu',
        'byn' => 'Blin',
        'byv' => 'Medumba',
        'ca' => 'Catalan',
        'cad' => 'Caddo',
        'car' => 'Carib',
        'cay' => 'Cayuga',
        'cch' => 'Atsam',
        'ce' => 'Chechen',
        'ceb' => 'Cebuano',
        'cgg' => 'Chiga',
        'ch' => 'Chamorro',
        'chb' => 'Chibcha',
        'chg' => 'Chagatai',
        'chk' => 'Chuukese',
        'chm' => 'Mari',
        'chn' => 'Chinook Jargon',
        'cho' => 'Choctaw',
        'chp' => 'Chipewyan',
        'chr' => 'Cherokee',
        'chy' => 'Cheyenne',
        'ckb' => 'Sorani Kurdish',
        'co' => 'Corsican',
        'cop' => 'Coptic',
        'cps' => 'Capiznon',
        'cr' => 'Cree',
        'crh' => 'Crimean Turkish',
        'cs' => 'Czech',
        'csb' => 'Kashubian',
        'cu' => 'Church Slavic',
        'cv' => 'Chuvash',
        'cy' => 'Welsh',
        'da' => 'Danish',
        'dak' => 'Dakota',
        'dar' => 'Dargwa',
        'dav' => 'Taita',
        'de' => 'German',
        'de_AT' => 'Austrian German',
        'de_CH' => 'Swiss High German',
        'del' => 'Delaware',
        'den' => 'Slave',
        'dgr' => 'Dogrib',
        'din' => 'Dinka',
        'dje' => 'Zarma',
        'doi' => 'Dogri',
        'dsb' => 'Lower Sorbian',
        'dtp' => 'Central Dusun',
        'dua' => 'Duala',
        'dum' => 'Middle Dutch',
        'dv' => 'Divehi',
        'dyo' => 'Jola-Fonyi',
        'dyu' => 'Dyula',
        'dz' => 'Dzongkha',
        'dzg' => 'Dazaga',
        'ebu' => 'Embu',
        'ee' => 'Ewe',
        'efi' => 'Efik',
        'egl' => 'Emilian',
        'egy' => 'Ancient Egyptian',
        'eka' => 'Ekajuk',
        'el' => 'Greek',
        'elx' => 'Elamite',
        'en' => 'English',
        'en_AU' => 'Australian English',
        'en_CA' => 'Canadian English',
        'en_GB' => 'British English',
        'en_US' => 'American English',
        'enm' => 'Middle English',
        'eo' => 'Esperanto',
        'es' => 'Spanish',
        'es_419' => 'Latin American Spanish',
        'es_ES' => 'European Spanish',
        'es_MX' => 'Mexican Spanish',
        'esu' => 'Central Yupik',
        'et' => 'Estonian',
        'eu' => 'Basque',
        'ewo' => 'Ewondo',
        'ext' => 'Extremaduran',
        'fa' => 'Persian',
        'fan' => 'Fang',
        'fat' => 'Fanti',
        'ff' => 'Fulah',
        'fi' => 'Finnish',
        'fil' => 'Filipino',
        'fit' => 'Tornedalen Finnish',
        'fj' => 'Fijian',
        'fo' => 'Faroese',
        'fon' => 'Fon',
        'fr' => 'French',
        'fr_CA' => 'Canadian French',
        'fr_CH' => 'Swiss French',
        'frc' => 'Cajun French',
        'frm' => 'Middle French',
        'fro' => 'Old French',
        'frp' => 'Arpitan',
        'frr' => 'Northern Frisian',
        'frs' => 'Eastern Frisian',
        'fur' => 'Friulian',
        'fy' => 'Western Frisian',
        'ga' => 'Irish',
        'gaa' => 'Ga',
        'gag' => 'Gagauz',
        'gan' => 'Gan Chinese',
        'gay' => 'Gayo',
        'gba' => 'Gbaya',
        'gbz' => 'Zoroastrian Dari',
        'gd' => 'Scottish Gaelic',
        'gez' => 'Geez',
        'gil' => 'Gilbertese',
        'gl' => 'Galician',
        'glk' => 'Gilaki',
        'gmh' => 'Middle High German',
        'gn' => 'Guarani',
        'goh' => 'Old High German',
        'gom' => 'Goan Konkani',
        'gon' => 'Gondi',
        'gor' => 'Gorontalo',
        'got' => 'Gothic',
        'grb' => 'Grebo',
        'grc' => 'Ancient Greek',
        'gsw' => 'Swiss German',
        'gu' => 'Gujarati',
        'guc' => 'Wayuu',
        'gun' => 'Gun',
        'gur' => 'Frafra',
        'guz' => 'Gusii',
        'gv' => 'Manx',
        'gwi' => 'Gwichʼin',
        'ha' => 'Hausa',
        'hai' => 'Haida',
        'hak' => 'Hakka Chinese',
        'haw' => 'Hawaiian',
        'he' => 'Hebrew',
        'hi' => 'Hindi',
        'hif' => 'Fiji Hindi',
        'hil' => 'Hiligaynon',
        'hit' => 'Hittite',
        'hne' => 'Chhattisgarhi',
        'hmn' => 'Hmong',
        'ho' => 'Hiri Motu',
        'hr' => 'Croatian',
        'hsb' => 'Upper Sorbian',
        'hsn' => 'Xiang Chinese',
        'ht' => 'Haitian',
        'hu' => 'Hungarian',
        'hup' => 'Hupa',
        'hy' => 'Armenian',
        'hz' => 'Herero',
        'ia' => 'Interlingua',
        'iba' => 'Iban',
        'ibb' => 'Ibibio',
        'id' => 'Indonesian',
        'ie' => 'Interlingue',
        'ig' => 'Igbo',
        'ii' => 'Sichuan Yi',
        'ik' => 'Inupiaq',
        'ilo' => 'Iloko',
        'inh' => 'Ingush',
        'io' => 'Ido',
        'is' => 'Icelandic',
        'it' => 'Italian',
        'iu' => 'Inuktitut',
        'izh' => 'Ingrian',
        'ja' => 'Japanese',
        'jam' => 'Jamaican Creole English',
        'jbo' => 'Lojban',
        'jgo' => 'Ngomba',
        'jmc' => 'Machame',
        'jpr' => 'Judeo-Persian',
        'jrb' => 'Judeo-Arabic',
        'jut' => 'Jutish',
        'jv' => 'Javanese',
        'ka' => 'Georgian',
        'kaa' => 'Kara-Kalpak',
        'kab' => 'Kabyle',
        'kac' => 'Kachin',
        'kaj' => 'Jju',
        'kam' => 'Kamba',
        'kaw' => 'Kawi',
        'kbd' => 'Kabardian',
        'kbl' => 'Kanembu',
        'kcg' => 'Tyap',
        'kde' => 'Makonde',
        'kea' => 'Kabuverdianu',
        'ken' => 'Kenyang',
        'kfo' => 'Koro',
        'kg' => 'Kongo',
        'kgp' => 'Kaingang',
        'kha' => 'Khasi',
        'kho' => 'Khotanese',
        'khq' => 'Koyra Chiini',
        'khw' => 'Khowar',
        'ki' => 'Kikuyu',
        'kiu' => 'Kirmanjki',
        'kj' => 'Kuanyama',
        'kk' => 'Kazakh',
        'kkj' => 'Kako',
        'kl' => 'Kalaallisut',
        'kln' => 'Kalenjin',
        'km' => 'Khmer',
        'kmb' => 'Kimbundu',
        'kn' => 'Kannada',
        'ko' => 'Korean',
        'koi' => 'Komi-Permyak',
        'kok' => 'Konkani',
        'kos' => 'Kosraean',
        'kpe' => 'Kpelle',
        'kr' => 'Kanuri',
        'krc' => 'Karachay-Balkar',
        'kri' => 'Krio',
        'krj' => 'Kinaray-a',
        'krl' => 'Karelian',
        'kru' => 'Kurukh',
        'ks' => 'Kashmiri',
        'ksb' => 'Shambala',
        'ksf' => 'Bafia',
        'ksh' => 'Colognian',
        'ku' => 'Kurdish',
        'kum' => 'Kumyk',
        'kut' => 'Kutenai',
        'kv' => 'Komi',
        'kw' => 'Cornish',
        'ky' => 'Kyrgyz',
        'la' => 'Latin',
        'lad' => 'Ladino',
        'lag' => 'Langi',
        'lah' => 'Lahnda',
        'lam' => 'Lamba',
        'lb' => 'Luxembourgish',
        'lez' => 'Lezghian',
        'lfn' => 'Lingua Franca Nova',
        'lg' => 'Ganda',
        'li' => 'Limburgish',
        'lij' => 'Ligurian',
        'liv' => 'Livonian',
        'lkt' => 'Lakota',
        'lmo' => 'Lombard',
        'ln' => 'Lingala',
        'lo' => 'Lao',
        'lol' => 'Mongo',
        'loz' => 'Lozi',
        'lt' => 'Lithuanian',
        'ltg' => 'Latgalian',
        'lu' => 'Luba-Katanga',
        'lua' => 'Luba-Lulua',
        'lui' => 'Luiseno',
        'lun' => 'Lunda',
        'luo' => 'Luo',
        'lus' => 'Mizo',
        'luy' => 'Luyia',
        'lv' => 'Latvian',
        'lzh' => 'Literary Chinese',
        'lzz' => 'Laz',
        'mad' => 'Madurese',
        'maf' => 'Mafa',
        'mag' => 'Magahi',
        'mai' => 'Maithili',
        'mak' => 'Makasar',
        'man' => 'Mandingo',
        'mas' => 'Masai',
        'mde' => 'Maba',
        'mdf' => 'Moksha',
        'mdr' => 'Mandar',
        'men' => 'Mende',
        'mer' => 'Meru',
        'mfe' => 'Morisyen',
        'mg' => 'Malagasy',
        'mga' => 'Middle Irish',
        'mgh' => 'Makhuwa-Meetto',
        'mgo' => 'Metaʼ',
        'mh' => 'Marshallese',
        'mi' => 'Maori',
        'mic' => 'Micmac',
        'min' => 'Minangkabau',
        'mk' => 'Macedonian',
        'ml' => 'Malayalam',
        'mn' => 'Mongolian',
        'mnc' => 'Manchu',
        'mni' => 'Manipuri',
        'mnk' => 'Mandinka',
        'moh' => 'Mohawk',
        'mos' => 'Mossi',
        'mr' => 'Marathi',
        'mrj' => 'Western Mari',
        'ms' => 'Malay',
        'mt' => 'Maltese',
        'mua' => 'Mundang',
        'mul' => 'Multiple Languages',
        'mus' => 'Creek',
        'mwl' => 'Mirandese',
        'mwr' => 'Marwari',
        'mwv' => 'Mentawai',
        'my' => 'Burmese',
        'mye' => 'Myene',
        'myv' => 'Erzya',
        'mzn' => 'Mazanderani',
        'nah' => 'Nahuatl',
        'na' => 'Nauru',
        'nan' => 'Min Nan Chinese',
        'nap' => 'Neapolitan',
        'naq' => 'Nama',
        'nb' => 'Norwegian Bokmål',
        'nd' => 'North Ndebele',
        'nds' => 'Low German',
        'ne' => 'Nepali',
        'new' => 'Newari',
        'ng' => 'Ndonga',
        'nia' => 'Nias',
        'niu' => 'Niuean',
        'njo' => 'Ao Naga',
        'nl' => 'Dutch',
        'nl_BE' => 'Flemish',
        'nmg' => 'Kwasio',
        'nn' => 'Norwegian Nynorsk',
        'nnh' => 'Ngiemboon',
        'no' => 'Norwegian',
        'nog' => 'Nogai',
        'non' => 'Old Norse',
        'nov' => 'Novial',
        'nqo' => 'NʼKo',
        'nr' => 'South Ndebele',
        'nso' => 'Northern Sotho',
        'nus' => 'Nuer',
        'nv' => 'Navajo',
        'nwc' => 'Classical Newari',
        'ny' => 'Nyanja',
        'nym' => 'Nyamwezi',
        'nyn' => 'Nyankole',
        'nyo' => 'Nyoro',
        'nzi' => 'Nzima',
        'oc' => 'Occitan',
        'oj' => 'Ojibwa',
        'om' => 'Oromo',
        'or' => 'Oriya',
        'os' => 'Ossetic',
        'osa' => 'Osage',
        'ota' => 'Ottoman Turkish',
        'pa' => 'Punjabi',
        'pag' => 'Pangasinan',
        'pal' => 'Pahlavi',
        'pam' => 'Pampanga',
        'pap' => 'Papiamento',
        'pau' => 'Palauan',
        'pcd' => 'Picard',
        'pdc' => 'Pennsylvania German',
        'pdt' => 'Plautdietsch',
        'peo' => 'Old Persian',
        'pfl' => 'Palatine German',
        'phn' => 'Phoenician',
        'pi' => 'Pali',
        'pl' => 'Polish',
        'pms' => 'Piedmontese',
        'pnt' => 'Pontic',
        'pon' => 'Pohnpeian',
        'prg' => 'Prussian',
        'pro' => 'Old Provençal',
        'ps' => 'Pashto',
        'pt' => 'Portuguese',
        'pt_BR' => 'Brazilian Portuguese',
        'pt_PT' => 'European Portuguese',
        'qu' => 'Quechua',
        'quc' => 'Kʼicheʼ',
        'qug' => 'Chimborazo Highland Quichua',
        'raj' => 'Rajasthani',
        'rap' => 'Rapanui',
        'rar' => 'Rarotongan',
        'rgn' => 'Romagnol',
        'rif' => 'Riffian',
        'rm' => 'Romansh',
        'rn' => 'Rundi',
        'ro' => 'Romanian',
        'ro_MD' => 'Moldavian',
        'rof' => 'Rombo',
        'rom' => 'Romany',
        'root' => 'Root',
        'rtm' => 'Rotuman',
        'ru' => 'Russian',
        'rue' => 'Rusyn',
        'rug' => 'Roviana',
        'rup' => 'Aromanian',
        'rw' => 'Kinyarwanda',
        'rwk' => 'Rwa',
        'sa' => 'Sanskrit',
        'sad' => 'Sandawe',
        'sah' => 'Sakha',
        'sam' => 'Samaritan Aramaic',
        'saq' => 'Samburu',
        'sas' => 'Sasak',
        'sat' => 'Santali',
        'saz' => 'Saurashtra',
        'sba' => 'Ngambay',
        'sbp' => 'Sangu',
        'sc' => 'Sardinian',
        'scn' => 'Sicilian',
        'sco' => 'Scots',
        'sd' => 'Sindhi',
        'sdc' => 'Sassarese Sardinian',
        'se' => 'Northern Sami',
        'see' => 'Seneca',
        'seh' => 'Sena',
        'sei' => 'Seri',
        'sel' => 'Selkup',
        'ses' => 'Koyraboro Senni',
        'sg' => 'Sango',
        'sga' => 'Old Irish',
        'sgs' => 'Samogitian',
        'sh' => 'Serbo-Croatian',
        'shi' => 'Tachelhit',
        'shn' => 'Shan',
        'shu' => 'Chadian Arabic',
        'si' => 'Sinhala',
        'sid' => 'Sidamo',
        'sk' => 'Slovak',
        'sl' => 'Slovenian',
        'sli' => 'Lower Silesian',
        'sly' => 'Selayar',
        'sm' => 'Samoan',
        'sma' => 'Southern Sami',
        'smj' => 'Lule Sami',
        'smn' => 'Inari Sami',
        'sms' => 'Skolt Sami',
        'sn' => 'Shona',
        'snk' => 'Soninke',
        'so' => 'Somali',
        'sog' => 'Sogdien',
        'son' => 'Songhay',
        'sq' => 'Albanian',
        'sr' => 'Serbian',
        'srn' => 'Sranan Tongo',
        'srr' => 'Serer',
        'ss' => 'Swati',
        'ssy' => 'Saho',
        'st' => 'Southern Sotho',
        'stq' => 'Saterland Frisian',
        'su' => 'Sundanese',
        'suk' => 'Sukuma',
        'sus' => 'Susu',
        'sux' => 'Sumerian',
        'sv' => 'Swedish',
        'sw' => 'Swahili',
        'swb' => 'Comorian',
        'swc' => 'Congo Swahili',
        'syc' => 'Classical Syriac',
        'syr' => 'Syriac',
        'szl' => 'Silesian',
        'ta' => 'Tamil',
        'tcy' => 'Tulu',
        'te' => 'Telugu',
        'tem' => 'Timne',
        'teo' => 'Teso',
        'ter' => 'Tereno',
        'tet' => 'Tetum',
        'tg' => 'Tajik',
        'th' => 'Thai',
        'ti' => 'Tigrinya',
        'tig' => 'Tigre',
        'tiv' => 'Tiv',
        'tk' => 'Turkmen',
        'tkl' => 'Tokelau',
        'tkr' => 'Tsakhur',
        'tl' => 'Tagalog',
        'tlh' => 'Klingon',
        'tli' => 'Tlingit',
        'tly' => 'Talysh',
        'tmh' => 'Tamashek',
        'tn' => 'Tswana',
        'to' => 'Tongan',
        'tog' => 'Nyasa Tonga',
        'tpi' => 'Tok Pisin',
        'tr' => 'Turkish',
        'tru' => 'Turoyo',
        'trv' => 'Taroko',
        'ts' => 'Tsonga',
        'tsd' => 'Tsakonian',
        'tsi' => 'Tsimshian',
        'tt' => 'Tatar',
        'ttt' => 'Muslim Tat',
        'tum' => 'Tumbuka',
        'tvl' => 'Tuvalu',
        'tw' => 'Twi',
        'twq' => 'Tasawaq',
        'ty' => 'Tahitian',
        'tyv' => 'Tuvinian',
        'tzm' => 'Central Atlas Tamazight',
        'udm' => 'Udmurt',
        'ug' => 'Uyghur',
        'uga' => 'Ugaritic',
        'uk' => 'Ukrainian',
        'umb' => 'Umbundu',
        'und' => 'Unknown Language',
        'ur' => 'Urdu',
        'uz' => 'Uzbek',
        'vai' => 'Vai',
        've' => 'Venda',
        'vec' => 'Venetian',
        'vep' => 'Veps',
        'vi' => 'Vietnamese',
        'vls' => 'West Flemish',
        'vmf' => 'Main-Franconian',
        'vo' => 'Volapük',
        'vot' => 'Votic',
        'vro' => 'Võro',
        'vun' => 'Vunjo',
        'wa' => 'Walloon',
        'wae' => 'Walser',
        'wal' => 'Wolaytta',
        'war' => 'Waray',
        'was' => 'Washo',
        'wo' => 'Wolof',
        'wuu' => 'Wu Chinese',
        'xal' => 'Kalmyk',
        'xh' => 'Xhosa',
        'xmf' => 'Mingrelian',
        'xog' => 'Soga',
        'yao' => 'Yao',
        'yap' => 'Yapese',
        'yav' => 'Yangben',
        'ybb' => 'Yemba',
        'yi' => 'Yiddish',
        'yo' => 'Yoruba',
        'yrl' => 'Nheengatu',
        'yue' => 'Cantonese',
        'za' => 'Zhuang',
        'zap' => 'Zapotec',
        'zbl' => 'Blissymbols',
        'zea' => 'Zeelandic',
        'zen' => 'Zenaga',
        'zgh' => 'Standard Moroccan Tamazight',
        'zh' => 'Chinese',
        'zh_Hans' => 'Simplified Chinese',
        'zh_Hant' => 'Traditional Chinese',
        'zu' => 'Zulu',
        'zun' => 'Zuni',
        'zxx' => 'No linguistic content',
        'zza' => 'Zaza',
    );

    /**
     * Territory names
     * @var array
     * @link http://cldr.unicode.org/index/downloads/cldr-26
     */
    protected static $territoryNames = array(
        '001' => 'World',
        '002' => 'Africa',
        '003' => 'North America',
        '005' => 'South America',
        '009' => 'Oceania',
        '011' => 'Western Africa',
        '013' => 'Central America',
        '014' => 'Eastern Africa',
        '015' => 'Northern Africa',
        '017' => 'Middle Africa',
        '018' => 'Southern Africa',
        '019' => 'Americas',
        '021' => 'Northern America',
        '029' => 'Caribbean',
        '030' => 'Eastern Asia',
        '034' => 'Southern Asia',
        '035' => 'Southeast Asia',
        '039' => 'Southern Europe',
        '053' => 'Australasia',
        '054' => 'Melanesia',
        '057' => 'Micronesian Region',
        '061' => 'Polynesia',
        '142' => 'Asia',
        '143' => 'Central Asia',
        '145' => 'Western Asia',
        '150' => 'Europe',
        '151' => 'Eastern Europe',
        '154' => 'Northern Europe',
        '155' => 'Western Europe',
        '419' => 'Latin America',
        'AC' => 'Ascension Island',
        'AD' => 'Andorra',
        'AE' => 'United Arab Emirates',
        'AF' => 'Afghanistan',
        'AG' => 'Antigua & Barbuda',
        'AI' => 'Anguilla',
        'AL' => 'Albania',
        'AM' => 'Armenia',
        'AN' => 'Netherlands Antilles',
        'AO' => 'Angola',
        'AQ' => 'Antarctica',
        'AR' => 'Argentina',
        'AS' => 'American Samoa',
        'AT' => 'Austria',
        'AU' => 'Australia',
        'AW' => 'Aruba',
        'AX' => 'Åland Islands',
        'AZ' => 'Azerbaijan',
        'BA' => 'Bosnia & Herzegovina',
        'BB' => 'Barbados',
        'BD' => 'Bangladesh',
        'BE' => 'Belgium',
        'BF' => 'Burkina Faso',
        'BG' => 'Bulgaria',
        'BH' => 'Bahrain',
        'BI' => 'Burundi',
        'BJ' => 'Benin',
        'BL' => 'St. Barthélemy',
        'BM' => 'Bermuda',
        'BN' => 'Brunei',
        'BO' => 'Bolivia',
        'BQ' => 'Caribbean Netherlands',
        'BR' => 'Brazil',
        'BS' => 'Bahamas',
        'BT' => 'Bhutan',
        'BV' => 'Bouvet Island',
        'BW' => 'Botswana',
        'BY' => 'Belarus',
        'BZ' => 'Belize',
        'CA' => 'Canada',
        'CC' => 'Cocos (Keeling) Islands',
        'CD' => 'Congo - Kinshasa',
        'CF' => 'Central African Republic',
        'CG' => 'Congo - Brazzaville',
        'CH' => 'Switzerland',
        'CI' => 'Côte d’Ivoire',
        'CK' => 'Cook Islands',
        'CL' => 'Chile',
        'CM' => 'Cameroon',
        'CN' => 'China',
        'CO' => 'Colombia',
        'CP' => 'Clipperton Island',
        'CR' => 'Costa Rica',
        'CU' => 'Cuba',
        'CV' => 'Cape Verde',
        'CW' => 'Curaçao',
        'CX' => 'Christmas Island',
        'CY' => 'Cyprus',
        'CZ' => 'Czech Republic',
        'DE' => 'Germany',
        'DG' => 'Diego Garcia',
        'DJ' => 'Djibouti',
        'DK' => 'Denmark',
        'DM' => 'Dominica',
        'DO' => 'Dominican Republic',
        'DZ' => 'Algeria',
        'EA' => 'Ceuta & Melilla',
        'EC' => 'Ecuador',
        'EE' => 'Estonia',
        'EG' => 'Egypt',
        'EH' => 'Western Sahara',
        'ER' => 'Eritrea',
        'ES' => 'Spain',
        'ET' => 'Ethiopia',
        'EU' => 'European Union',
        'FI' => 'Finland',
        'FJ' => 'Fiji',
        'FK' => 'Falkland Islands',
        'FM' => 'Micronesia',
        'FO' => 'Faroe Islands',
        'FR' => 'France',
        'GA' => 'Gabon',
        'GB' => 'United Kingdom',
        'GD' => 'Grenada',
        'GE' => 'Georgia',
        'GF' => 'French Guiana',
        'GG' => 'Guernsey',
        'GH' => 'Ghana',
        'GI' => 'Gibraltar',
        'GL' => 'Greenland',
        'GM' => 'Gambia',
        'GN' => 'Guinea',
        'GP' => 'Guadeloupe',
        'GQ' => 'Equatorial Guinea',
        'GR' => 'Greece',
        'GS' => 'South Georgia & South Sandwich Islands',
        'GT' => 'Guatemala',
        'GU' => 'Guam',
        'GW' => 'Guinea-Bissau',
        'GY' => 'Guyana',
        'HK' => 'Hong Kong SAR China',
        'HM' => 'Heard & McDonald Islands',
        'HN' => 'Honduras',
        'HR' => 'Croatia',
        'HT' => 'Haiti',
        'HU' => 'Hungary',
        'IC' => 'Canary Islands',
        'ID' => 'Indonesia',
        'IE' => 'Ireland',
        'IL' => 'Israel',
        'IM' => 'Isle of Man',
        'IN' => 'India',
        'IO' => 'British Indian Ocean Territory',
        'IQ' => 'Iraq',
        'IR' => 'Iran',
        'IS' => 'Iceland',
        'IT' => 'Italy',
        'JE' => 'Jersey',
        'JM' => 'Jamaica',
        'JO' => 'Jordan',
        'JP' => 'Japan',
        'KE' => 'Kenya',
        'KG' => 'Kyrgyzstan',
        'KH' => 'Cambodia',
        'KI' => 'Kiribati',
        'KM' => 'Comoros',
        'KN' => 'St. Kitts & Nevis',
        'KP' => 'North Korea',
        'KR' => 'South Korea',
        'KW' => 'Kuwait',
        'KY' => 'Cayman Islands',
        'KZ' => 'Kazakhstan',
        'LA' => 'Laos',
        'LB' => 'Lebanon',
        'LC' => 'St. Lucia',
        'LI' => 'Liechtenstein',
        'LK' => 'Sri Lanka',
        'LR' => 'Liberia',
        'LS' => 'Lesotho',
        'LT' => 'Lithuania',
        'LU' => 'Luxembourg',
        'LV' => 'Latvia',
        'LY' => 'Libya',
        'MA' => 'Morocco',
        'MC' => 'Monaco',
        'MD' => 'Moldova',
        'ME' => 'Montenegro',
        'MF' => 'St. Martin',
        'MG' => 'Madagascar',
        'MH' => 'Marshall Islands',
        'MK' => 'Macedonia',
        'ML' => 'Mali',
        'MM' => 'Myanmar (Burma)',
        'MN' => 'Mongolia',
        'MO' => 'Macau SAR China',
        'MP' => 'Northern Mariana Islands',
        'MQ' => 'Martinique',
        'MR' => 'Mauritania',
        'MS' => 'Montserrat',
        'MT' => 'Malta',
        'MU' => 'Mauritius',
        'MV' => 'Maldives',
        'MW' => 'Malawi',
        'MX' => 'Mexico',
        'MY' => 'Malaysia',
        'MZ' => 'Mozambique',
        'NA' => 'Namibia',
        'NC' => 'New Caledonia',
        'NE' => 'Niger',
        'NF' => 'Norfolk Island',
        'NG' => 'Nigeria',
        'NI' => 'Nicaragua',
        'NL' => 'Netherlands',
        'NO' => 'Norway',
        'NP' => 'Nepal',
        'NR' => 'Nauru',
        'NU' => 'Niue',
        'NZ' => 'New Zealand',
        'OM' => 'Oman',
        'PA' => 'Panama',
        'PE' => 'Peru',
        'PF' => 'French Polynesia',
        'PG' => 'Papua New Guinea',
        'PH' => 'Philippines',
        'PK' => 'Pakistan',
        'PL' => 'Poland',
        'PM' => 'St. Pierre & Miquelon',
        'PN' => 'Pitcairn Islands',
        'PR' => 'Puerto Rico',
        'PS' => 'Palestinian Territories',
        'PT' => 'Portugal',
        'PW' => 'Palau',
        'PY' => 'Paraguay',
        'QA' => 'Qatar',
        'QO' => 'Outlying Oceania',
        'RE' => 'Réunion',
        'RO' => 'Romania',
        'RS' => 'Serbia',
        'RU' => 'Russia',
        'RW' => 'Rwanda',
        'SA' => 'Saudi Arabia',
        'SB' => 'Solomon Islands',
        'SC' => 'Seychelles',
        'SD' => 'Sudan',
        'SE' => 'Sweden',
        'SG' => 'Singapore',
        'SH' => 'St. Helena',
        'SI' => 'Slovenia',
        'SJ' => 'Svalbard & Jan Mayen',
        'SK' => 'Slovakia',
        'SL' => 'Sierra Leone',
        'SM' => 'San Marino',
        'SN' => 'Senegal',
        'SO' => 'Somalia',
        'SR' => 'Suriname',
        'SS' => 'South Sudan',
        'ST' => 'São Tomé & Príncipe',
        'SV' => 'El Salvador',
        'SX' => 'Sint Maarten',
        'SY' => 'Syria',
        'SZ' => 'Swaziland',
        'TA' => 'Tristan da Cunha',
        'TC' => 'Turks & Caicos Islands',
        'TD' => 'Chad',
        'TF' => 'French Southern Territories',
        'TG' => 'Togo',
        'TH' => 'Thailand',
        'TJ' => 'Tajikistan',
        'TK' => 'Tokelau',
        'TL' => 'Timor-Leste',
        'TM' => 'Turkmenistan',
        'TN' => 'Tunisia',
        'TO' => 'Tonga',
        'TR' => 'Turkey',
        'TT' => 'Trinidad & Tobago',
        'TV' => 'Tuvalu',
        'TW' => 'Taiwan',
        'TZ' => 'Tanzania',
        'UA' => 'Ukraine',
        'UG' => 'Uganda',
        'UM' => 'U.S. Outlying Islands',
        'US' => 'United States',
        'UY' => 'Uruguay',
        'UZ' => 'Uzbekistan',
        'VA' => 'Vatican City',
        'VC' => 'St. Vincent & Grenadines',
        'VE' => 'Venezuela',
        'VG' => 'British Virgin Islands',
        'VI' => 'U.S. Virgin Islands',
        'VN' => 'Vietnam',
        'VU' => 'Vanuatu',
        'WF' => 'Wallis & Futuna',
        'WS' => 'Samoa',
        'XK' => 'Kosovo',
        'YE' => 'Yemen',
        'YT' => 'Mayotte',
        'ZA' => 'South Africa',
        'ZM' => 'Zambia',
        'ZW' => 'Zimbabwe',
        'ZZ' => 'Unknown Region',
    );

    /**
     * Returns the info of a locale
     *
     * @param string $code
     *
     * @return null|array Returns null if $code is not valid, an array with these keys otherwise: plurals, pluralRule, languageName, territoryName
     */
    public static function getLocaleInfo($code)
    {
        $result = null;

        // Locale identifier structure: see Unicode Language Identifier - http://www.unicode.org/reports/tr35/tr35-31/tr35.html#Unicode_language_identifier
        if (is_string($code) && preg_match('/^([a-z]{2,3})(?:[_\-]([a-z]{4}))?(?:[_\-]([a-z]{2}|[0-9]{3}))?(?:$|[_\-])/i', $code, $matches)) {
            $language = strtolower($matches[1]);
            $script = isset($matches[2]) ? ucfirst(strtolower($matches[2])) : '';
            $territory = isset($matches[3]) ? strtoupper($matches[3]) : '';

            // Structure precedence: see Likely Subtags - http://www.unicode.org/reports/tr35/tr35-31/tr35.html#Likely_Subtags
            $variants = array();

            if (($script !== '') && ($territory !== '')) {
                $variants[] = "{$language}_{$script}_{$territory}";
            }

            if ($script !== '') {
                $variants[] = "{$language}_{$script}";
            }

            if ($territory !== '') {
                $variants[] = "{$language}_{$territory}";
            }

            $variants[] = $language;

            foreach ($variants as $variant) {
                if (isset(static::$pluralRules[$variant])) {
                    $result = static::$pluralRules[$variant];
                    $result['languageName'] = $language;
                    foreach ($variants as $variant) {
                        if (isset(static::$languageNames[$variant])) {
                            $result['languageName'] = static::$languageNames[$variant];
                        }
                    }
                    $result['territoryName'] = isset(static::$territoryNames[$territory]) ? static::$territoryNames[$territory] : $territory;
                    break;
                }
            }
        }

        return $result;
    }
}
